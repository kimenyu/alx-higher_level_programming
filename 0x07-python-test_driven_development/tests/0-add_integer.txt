# run test with python3 -m doctest -v ./tests/0-add_integer.txt
import unittest
from test import add_integer

class TestAddingInt(unittest.TestCase):
    def test_integers(self):
        # Test for integers
        result = add_integer(10, 6)
        self.assertIsInstance(result, int)  # Check if the result is of type 'int'
        self.assertEqual(result, 16)  # Check if the result is equal to 16

    def test_floats(self):
        # Test for floats
        result = add_integer(10.7, 11.9)
        self.assertIsInstance(result, int)  # Check if the result is of type 'int'
        self.assertEqual(result, 21)  # Check if the result is equal to 21

    def test_mixed_types(self):
        # Test for mixed types (integer and float)
        result = add_integer(10, 11.9)
        self.assertIsInstance(result, int)  # Check if the result is of type 'int'
        self.assertEqual(result, 21)  # Check if the result is equal to 21

    def test_default_value(self):
        # Test for default value of b (98)
        result = add_integer(3.1)
        self.assertIsInstance(result, int)  # Check if the result is of type 'int'
        self.assertEqual(result, 101)  # Check if the result is equal to 101

    def test_type_error(self):
        # Test for TypeError when non-integer or non-float values are passed
        with self.assertRaises(TypeError):  # Check if a TypeError is raised
            add_integer('s', 'b')

